--- AMReX_PlotFileUtilHDF5.ori	2025-02-28 19:24:39
+++ AMReX_PlotFileUtilHDF5.cpp	2025-03-03 21:15:41
@@ -1,3 +1,4 @@
+#include <BurstBuffer.h>
 #include <AMReX_VisMF.H>
 #include <AMReX_AsyncOut.H>
 #include <AMReX_PlotFileUtil.H>
@@ -373,11 +374,21 @@
     int finest_level = nlevels-1;
     int ncomp = mf[0]->nComp();
     /* double total_write_start_time(ParallelDescriptor::second()); */
+    int rank;
+    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
+    if(rank == 0)
+        //fprintf(stderr,"hook successfully!\n");
+        writeFile(plotfilename.c_str());
+    MPI_Barrier(MPI_COMM_WORLD);
     std::string filename(plotfilename + ".h5");
 
     // Write out root level metadata
     hid_t fapl, dxpl_col, dxpl_ind, dcpl_id, fid, grp;
 
+    if(rank == 0)
+        //fprintf(stderr,"hook successfully!\n");
+        writeFile(filename.c_str());
+    MPI_Barrier(MPI_COMM_WORLD);
     if(ParallelDescriptor::IOProcessor()) {
         BL_PROFILE_VAR("H5writeMetadata", h5dwm);
         // Create the HDF5 file
@@ -446,7 +457,7 @@
     dcpl_id = H5Pcreate(H5P_DATASET_CREATE);
     H5Pset_fill_time(dcpl_id, H5D_FILL_TIME_NEVER);
 
-#if (defined AMREX_USE_HDF5_ZFP) || (defined AMREX_USE_HDF5_SZ) || (defined AMREX_USE_HDF5_SZ3)
+#if (defined AMREX_USE_HDF5_ZFP) || (defined AMREX_USE_HDF5_SZ) || (defined AMREX_USE_HDF5_SZ3) || (defined AMREX_USE_HDF5_ZLIB)
     const char *chunk_env = NULL;
     std::string mode_env, value_env;
     double comp_value = -1.0;
@@ -488,8 +499,17 @@
 // #endif
 
     if (!mode_env.empty() && mode_env != "None") {
+#ifdef AMREX_USE_HDF5_ZLIB
+        std::ifstream inputFile("level.txt");
+        if (inputFile.is_open()) {
+            inputFile >> comp_value;
+            inputFile.close();
+        } else {
+            std::cerr << "Unable to open the level file." << std::endl;
+        }
         if (mode_env == "ZLIB")
             H5Pset_deflate(dcpl_id, (int)comp_value);
+#endif
 #ifdef AMREX_USE_HDF5_ZFP
         else if (mode_env == "ZFP_RATE")
             H5Pset_zfp_rate(dcpl_id, comp_value);
